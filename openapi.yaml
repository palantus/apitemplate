openapi: '3.0.0'
info:
  version: 1.0.0
  title: Petstore
  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
  contact:
    name: Palantus
    email: a@b.c
    url: https://github.com/palantus/apitemplate
servers:
  - url: http://localhost:8080/api
tags:
- name: "pet"
  description: "Everything about your Pets"
paths:
  /pets:
    get:
      tags:
      - "pet"
      description:
        Returns all pets from the system that the user has access to
      operationId: all
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - "pet"
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: addPet 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets/{name}:
    get:
      tags:
      - "pet"
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: find pet by id
      parameters:
        - name: name
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - "pet"
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      parameters:
        - name: name
          in: path
          description: ID of pet to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: pet deleted
          content: 
            application/json:
              schema:
                type: boolean
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  schemas:
    NewPet:
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
        breed:
          type: string
          nullable: true
        age:
          type: integer
          nullable: true

    Pet:
      allOf:
        - $ref: '#/components/schemas/NewPet'
        - required:
            - id
          properties:
            id:
              type: integer
              format: int64

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  #securitySchemes:
  #  ApiKeyAuth:
  #    type: apiKey
  #    in: header
  #    name: X-API-Key